-- device table
CREATE TABLE IF NOT EXISTS device
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id           UUID REFERENCES auth.users (id),
    device_id         VARCHAR                 NOT NULL,
    fcm_token         VARCHAR,
    manufacturer      VARCHAR,
    device_model      VARCHAR,
    os                VARCHAR,
    os_version        VARCHAR,
    app_version       VARCHAR,
    ram_size          VARCHAR,
    screen_resolution VARCHAR,
    is_rooted         BOOLEAN,
    is_logged_in      BOOLEAN                 NOT NULL,
    originated_ip     VARCHAR,
    ip_location       VARCHAR,
    timestamp_login   TIMESTAMP,
    timestamp_logout  TIMESTAMP,
    created_at        TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at        TIMESTAMP DEFAULT NOW() NOT NULL,
    CONSTRAINT unique_device_user UNIQUE (device_id, user_id)
);

COMMENT ON TABLE device IS 'List of user devices';

ALTER TABLE device
    OWNER TO postgres;

GRANT SELECT, UPDATE, USAGE ON SEQUENCE device_id_seq TO anon;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE device_id_seq TO authenticated;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE device_id_seq TO service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON device TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON device TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON device TO service_role;

-- contact us table
CREATE TABLE IF NOT EXISTS contact_us
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email      VARCHAR,
    content    VARCHAR,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL
);

ALTER TABLE contact_us
    OWNER TO postgres;

GRANT SELECT, UPDATE, USAGE ON SEQUENCE contact_us_id_seq TO anon;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE contact_us_id_seq TO authenticated;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE contact_us_id_seq TO service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON contact_us TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON contact_us TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON contact_us TO service_role;

-- user orders table
CREATE TABLE IF NOT EXISTS user_order
(
    id                  UUID      DEFAULT gen_random_uuid() NOT NULL
        CONSTRAINT user_bundle_order_pkey PRIMARY KEY,
    user_id             UUID      DEFAULT auth.uid()        NOT NULL
        CONSTRAINT user_bundle_order_user_id_fkey REFERENCES auth.users (id),
    esim_order_id       VARCHAR,
    bundle_id           VARCHAR                             NOT NULL,
    amount              INTEGER                             NOT NULL,
    currency            VARCHAR                             NOT NULL,
    order_type          VARCHAR   DEFAULT 'assign'          NOT NULL,
    payment_status      VARCHAR   DEFAULT 'pending'         NOT NULL,
    order_status        VARCHAR   DEFAULT 'pending'         NOT NULL,
    payment_time        TIMESTAMP,
    created_at          TIMESTAMP DEFAULT NOW()             NOT NULL,
    callback_time       TIMESTAMP,
    bundle_data         TEXT,
    searched_countries  VARCHAR,
    anonymous_user_id   UUID      DEFAULT auth.uid()
        CONSTRAINT user_bundle_order_anonymous_user_fkey REFERENCES auth.users (id),
    payment_intent_code VARCHAR
);

ALTER TABLE user_order
    OWNER TO postgres;

GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_order TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_order TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_order TO service_role;

-- notifications table
CREATE TABLE IF NOT EXISTS notification
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    title      TEXT,
    content    TEXT,
    status     BOOLEAN,
    updated_at TIMESTAMP DEFAULT NOW(),
    data       TEXT,
    user_id    UUID REFERENCES auth.users (id),
    image_url  VARCHAR
);

ALTER TABLE notification
    OWNER TO postgres;

GRANT SELECT, UPDATE, USAGE ON SEQUENCE notification_id_seq TO anon;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE notification_id_seq TO authenticated;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE notification_id_seq TO service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON notification TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON notification TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON notification TO service_role;

-- user profiles table
CREATE TABLE IF NOT EXISTS user_profile
(
    id                 UUID                     DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    user_id            UUID                     DEFAULT auth.uid() REFERENCES auth.users (id),
    user_order_id      UUID                                               NOT NULL REFERENCES user_order,
    iccid              VARCHAR(100)                                       NOT NULL,
    smdp_address       VARCHAR(100)                                       NOT NULL,
    validity           VARCHAR(100),
    created_at         TIMESTAMP WITH TIME ZONE DEFAULT NOW()             NOT NULL,
    label              VARCHAR(200),
    activation_code    VARCHAR(200)                                       NOT NULL,
    allow_topup        BOOLEAN                  DEFAULT FALSE             NOT NULL,
    esim_hub_order_id  VARCHAR(200),
    searched_countries VARCHAR(200),
    shared_user_id     UUID                     DEFAULT gen_random_uuid()
);

ALTER TABLE user_profile
    OWNER TO postgres;

GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile TO service_role;


-- user profile bundles table
CREATE TABLE IF NOT EXISTS user_profile_bundle
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT user_bundle_pkey PRIMARY KEY,
    user_id           UUID         DEFAULT auth.uid()                NOT NULL
        CONSTRAINT user_bundle_user_id_fkey REFERENCES auth.users (id),
    user_order_id     UUID                                           NOT NULL
        CONSTRAINT user_bundle_user_order_id_fkey REFERENCES user_order,
    plan_started      BOOLEAN      DEFAULT FALSE                     NOT NULL,
    bundle_expired    BOOLEAN      DEFAULT FALSE                     NOT NULL,
    created_at        TIMESTAMP    DEFAULT NOW()                     NOT NULL,
    bundle_type       VARCHAR(100) DEFAULT 'Primary Bundle'::VARCHAR NOT NULL,
    bundle_data       JSONB                                          NOT NULL,
    iccid             VARCHAR,
    user_profile_id   UUID                                           NOT NULL REFERENCES user_profile,
    esim_hub_order_id VARCHAR
);

ALTER TABLE user_profile_bundle
    OWNER TO postgres;

GRANT SELECT, UPDATE, USAGE ON SEQUENCE user_profile_bundle_id_seq TO anon;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE user_profile_bundle_id_seq TO authenticated;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE user_profile_bundle_id_seq TO service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile_bundle TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile_bundle TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON user_profile_bundle TO service_role;


-- users copy table
CREATE TABLE IF NOT EXISTS users_copy
(
    id       UUID NOT NULL PRIMARY KEY,
    email    TEXT UNIQUE,
    metadata JSONB
);

ALTER TABLE users_copy
    OWNER TO postgres;

GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON users_copy TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRUNCATE, UPDATE ON users_copy TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRUNCATE, UPDATE ON users_copy TO service_role;


-- app configurations table
CREATE TABLE IF NOT EXISTS app_config
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key        VARCHAR                                NOT NULL,
    value      TEXT                                   NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

ALTER TABLE app_config
    OWNER TO postgres;

GRANT SELECT, UPDATE, USAGE ON SEQUENCE app_config_id_seq TO anon;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE app_config_id_seq TO authenticated;
GRANT SELECT, UPDATE, USAGE ON SEQUENCE app_config_id_seq TO service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON app_config TO anon;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRUNCATE, UPDATE ON app_config TO authenticated;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRUNCATE, UPDATE ON app_config TO service_role;

-- functions ( update timestamp )
CREATE OR REPLACE FUNCTION update_timestamp() RETURNS TRIGGER
    LANGUAGE plpgsql
AS
$$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

ALTER FUNCTION update_timestamp() OWNER TO postgres;

CREATE TRIGGER update_device_timestamp
    BEFORE UPDATE
    ON device
    FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

GRANT EXECUTE ON FUNCTION update_timestamp() TO anon;
GRANT EXECUTE ON FUNCTION update_timestamp() TO authenticated;
GRANT EXECUTE ON FUNCTION update_timestamp() TO service_role;


GRANT TRIGGER ON auth.users TO postgres, service_role;

-- functions ( sync users copy )
CREATE OR REPLACE FUNCTION sync_users_copy()
    RETURNS TRIGGER
SECURITY DEFINER
    LANGUAGE plpgsql
    AS
    $$
BEGIN
    -- Handle INSERT
    IF TG_OP = 'INSERT' THEN
        INSERT INTO public.users_copy (id, email, metadata)
        VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data)
        ON CONFLICT (id) DO NOTHING;

    -- Handle UPDATE
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE public.users_copy
        SET email = NEW.email,
            metadata = NEW.raw_user_meta_data
        WHERE id = NEW.id;

    -- Handle DELETE
    ELSIF TG_OP = 'DELETE' THEN
        DELETE
        FROM public.users_copy
        WHERE id = OLD.id;
    END IF;

    RETURN NEW;
END;
$$;

-- Create trigger for `auth.users` table
CREATE OR REPLACE TRIGGER trigger_sync_users_copy
    AFTER INSERT OR UPDATE OR DELETE
    ON auth.users
    FOR EACH ROW
EXECUTE FUNCTION sync_users_copy();

ALTER FUNCTION sync_users_copy() OWNER TO postgres;

-- Grant permissions
GRANT EXECUTE ON FUNCTION sync_users_copy() TO anon;
GRANT EXECUTE ON FUNCTION sync_users_copy() TO authenticated;
GRANT EXECUTE ON FUNCTION sync_users_copy() TO service_role;



-- create promotion, referral and wallet features

CREATE TABLE promotion_rule_action
(
    id   SMALLINT PRIMARY KEY,
    name VARCHAR(30)
);
CREATE TABLE promotion_rule_event
(
    id   SMALLINT PRIMARY KEY,
    name VARCHAR(30)
);


CREATE TABLE promotion_rule
(
    id                       UUID         DEFAULT gen_random_uuid() PRIMARY KEY,
    promotion_rule_action_id INT NOT NULL REFERENCES promotion_rule_action (id),        -- action to be executed 0: discount amount, 1: cashback amount, 2: discount%, 3: cashback%
    promotion_rule_event_id  INT NOT NULL REFERENCES promotion_rule_event (id),         -- action_on is when to do the action: 0: create order, 1: create account
    max_usage                INT NOT NULL DEFAULT 1,                                    -- maximum usage of the code
    beneficiary              INT NOT NULL DEFAULT 0 CHECK ( beneficiary IN (0, 1, 2) ), -- whose will benefit from the code, used in case there were referral codes
    created_at               TIMESTAMP    DEFAULT NOW()
);


CREATE TABLE promotion
(
    id               UUID         DEFAULT gen_random_uuid() PRIMARY KEY,
    rule_id          UUID        NOT NULL REFERENCES promotion_rule (id),
    code             VARCHAR(50) NOT NULL UNIQUE, -- Ensures unique promo codes
    bundle_code      VARCHAR(200) DEFAULT NULL,
    type             VARCHAR(50),
    name             VARCHAR(300) DEFAULT NULL,
    amount           FLOAT4       DEFAULT 0,
    callback_url     TEXT         DEFAULT NULL,
    callback_headers TEXT         DEFAULT NULL,
    valid_from       TIMESTAMP    DEFAULT NULL,
    valid_to         TIMESTAMP    DEFAULT NULL,
    is_active        BOOL         DEFAULT TRUE,
    times_used       INT          DEFAULT 0,
    created_at       TIMESTAMP    DEFAULT NOW()
);

CREATE TABLE promotion_usage
(
    id             UUID                 DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id        UUID REFERENCES auth.users (id),
    promotion_code VARCHAR REFERENCES promotion (code),
    referral_code  VARCHAR,
    bundle_id      UUID REFERENCES bundle(id),
    amount         FLOAT4    DEFAULT 0 CHECK (amount >= 0),
    status         VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK ( status IN ('pending', 'completed', 'failed') ),
    created_at     TIMESTAMP            DEFAULT now()
);

CREATE TABLE user_wallet
(
    id         UUID      DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id    UUID        NOT NULL REFERENCES auth.users (id) ON DELETE CASCADE,
    amount     FLOAT4    DEFAULT 0 CHECK (amount >= 0), -- Prevents negative balances
    currency   VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT now(),
    update_at  TIMESTAMP DEFAULT now()
);

CREATE TABLE user_wallet_transaction
(
    id         UUID      DEFAULT gen_random_uuid() PRIMARY KEY,
    wallet_id  UUID        NOT NULL REFERENCES user_wallet (id) ON DELETE CASCADE,
    amount     FLOAT4      NOT NULL CHECK (amount > 0), -- Ensures valid transactions
    status     VARCHAR(10) NOT NULL CHECK (status IN ('success', 'failed', 'pending')),
    source     VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);


ALTER TABLE user_order
    ADD COLUMN promo_code VARCHAR(50) REFERENCES promotion (code) DEFAULT NULL;

ALTER TABLE user_order
    ADD COLUMN referral_code VARCHAR(50) DEFAULT NULL;
ALTER TABLE user_order
    ADD COLUMN modified_amount FLOAT4 DEFAULT NULL;


INSERT INTO promotion_rule_action(id, name)
values (1, 'DISCOUNT_AMOUNT'),
       (2, 'DISCOUNT_PERCENTAGE'),
       (3, 'CASHBACK_AMOUNT'),
       (4, 'CASHBACK_PERCENTAGE')
;
INSERT INTO promotion_rule_event(id, name)
values (1, 'CREATE_ORDER'),
       (2, 'CREATE_ACCOUNT');




CREATE TABLE public.bundle (
  id uuid not null default gen_random_uuid (),
  data jsonb null,
  is_active boolean null default true,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint bundle_pkey primary key (id)
);

CREATE TABLE public.tag (
  id uuid not null default gen_random_uuid (),
  tag_group_id bigint not null,
  name character varying(300) not null,
  icon character varying(300) not null,
  data jsonb null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint tag_pkey primary key (id),
  constraint tag_tag_group_id_fkey foreign KEY (tag_group_id) references tag_group (id)
);

CREATE TABLE public.bundle_tag (
  id bigint generated by default as identity not null,
  bundle_id uuid not null,
  tag_id uuid not null,
  is_active boolean null default true,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint bundle_tag_pkey primary key (id),
  constraint bundle_tag_bundle_id_fkey foreign KEY (bundle_id) references bundle (id),
  constraint bundle_tag_tag_id_fkey foreign KEY (tag_id) references tag (id)
);

CREATE TABLE public.tag_group (
  id bigint generated by default as identity not null,
  name character varying(300) null,
  type integer not null,
  group_category varchar,
  is_active boolean null default true,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint tag_group_pkey primary key (id)
);

CREATE TABLE currency
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name             VARCHAR(300) ,
    rate             FLOAT4      NOT NULL,
    default_currency VARCHAR(300) NOT NULL,
    created_at       TIMESTAMP    DEFAULT NOW(),
    updated_at       TIMESTAMP    DEFAULT NOW()
);


CREATE TABLE voucher
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code             VARCHAR(300) ,
    amount           FLOAT4       NOT NULL,
    is_used          BOOL         NOT NULL DEFAULT FALSE,
    is_active        BOOL         NOT NULL DEFAULT TRUE,
    used_by          UUID         NULL,
    created_at       TIMESTAMP    DEFAULT NOW(),
    updated_at       TIMESTAMP    DEFAULT NOW()
);

INSERT INTO "public"."tag_group" ("id", "name", "type", "is_active", "created_at", "updated_at", "group_category")
VALUES ('1', 'Countries', '1', 'true', '2025-04-25 10:44:31.465406', '2025-04-25 10:44:31.465406', 'on_land'),
       ('2', 'Regions', '1', 'true', '2025-04-25 10:44:45.447889', '2025-04-25 10:44:45.447889', 'on_land'),
       ('3', 'Cruise', '2', 'true', '2025-04-25 10:44:58.837759', '2025-04-25 10:44:58.837759', 'at_sea'),
       ('4', 'Global', '2', 'true', '2025-04-25 10:45:12.252329', '2025-04-25 10:45:12.252329', 'on_land');


ALTER TABLE promotion_usage
DROP CONSTRAINT promotion_usage_status_check;

ALTER TABLE promotion_usage
ADD CONSTRAINT promotion_usage_status_check
CHECK (status IN ('pending', 'success', 'failed'));